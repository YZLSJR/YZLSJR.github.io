{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"https://yzlsjr.github.io","root":"/"},"pages":[],"posts":[{"title":"Python学习","slug":"python学习","date":"2024-04-07T13:56:04.546Z","updated":"2024-04-08T08:36:28.941Z","comments":true,"path":"2024/04/07/python学习/","permalink":"https://yzlsjr.github.io/2024/04/07/python%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"一.查询数据类型type=(&quot;&quot;)变量无类型查的是数据类型语句有返回值便可以被赋值 name1=type(name) 二.数据类型转换 语句 说明 int(x) 将x转成整数 float(x) 将X转成浮点数 str(x) 将x转成字符串 三.标识符数字不可以作为开头 四.字符串拼接 字符串用加号拼接，不能和其它类型用加号拼接 1print(&quot;我是&quot;+&quot;黑马&quot;) 占位式拼接(可以不同类型) 123name = 999message = &quot;两人%s&quot; % nameprint(message) 多变量占位，变量要用括号括起来，并按占位顺序填入 1234i = 2t = 3a = &quot;我%s岁了，他%s岁了&quot; % (i,t)print(message) 符号 转化 %s 转为字符串放入 %d 转为整数放入 %f 转为浮点数放入 精度控制 .n控制小数点精度（&#x3D;&#x3D;同时会对小数部分进行四舍五入&#x3D;&#x3D;） m控制宽度（m若比数字本身宽度还小，则不生效） 例：对11.35设置了**%7.2f后，结果是：[空格][空格]11.35**,两空格补足宽度。 快速字符串格式化 语法：f”内容{要拼接的变量}” 123a=1b=4.66print(f&quot;我&#123;a&#125;岁了，他&#123;b&#125;岁了&quot;) &#x3D;&#x3D;但数字变量不做精度控制，原样输出&#x3D;&#x3D; 表达式格式化 表达式：一条具有明确执行结果的代码语句 1print(&quot;1 * 1的结果是:%d&quot; % (1 * 1)) 六.input语句input(“提示语句”) input中不管输入什么都视为字符串 七.随机数random 12import randomnum = random.randint(1,10) 八.for循环(遍历循环，依次取出)1234name = yangziliang for x in name: print(x) ​ 将name中的内容，挨个取出赋予x临时变量​ 就可以在循环体内对x进行处理 九.rangerange(num)获得一个数字序列从0开始，不含numrange(num1,num2)获得一个数字序列不含num2range(num1,num2,step)获得一个数字序列不含num2,且数字之间的步长，以step为准，默认step为1 十.continue中断本次循环，直接进入下一次 1234for i in range(1,100): 语句一 continue 语句二 上面代码中语句二不会执行 十一.break跳出所在循环 十二.函数1.函数的定义123def 函数名 (传入参数)： 函数体 return 返回值 2.函数的调用函数名(参数) 3.传入参数功能：在函数进行计算时，接受外部（调用时）提供的数据 1234def add(x,y): result = x + y print(f&quot;&#123;x&#125; + &#123;y&#125;的结果是：&#123;result&#125;&quot;)add(5,6) def add(x, y)中x和y称为形参，表示函数声明将要使用两个参数 参数之间用逗号隔开 函数调用中提供的5和6称为实参，表明函数执行时真正使用的参数值 4.返回值语法： 1234def 函数名(参数···): 函数体 return 返回值变量 = 函数(参数) 写不写return,函数都有返回值，不写的时候返回None None用在if判断中，None等同于False 用于声明无内容的变量上 定义变量但暂时不需要变量有具体值，可以用None来代替 1name = None 5.函数说明文档1234567def add(x y): &quot;&quot;&quot; 函数功能···· :param x:表示 :param y:表示 :return: &quot;&quot;&quot; 将鼠标悬停在函数名或者参数上可以看到说明文档 6.变量作用域两类：局部变量和全局变量 局部变量指定义在函数体内部的变量，只在函数体内部生效，在函数体内使用完便会销毁，无法在函数体外发挥作用 全局变量，函数体内外都可生效，定义在函数体外即可 如何在函数体内修改全局变量 答：在函数体内写上global 要修改的全局变量 数据容器1.列表1. 变量名称 = [元素一，元素二，元素三······] 空列表变量名称 = []变量名称 = list() 列表可以一次存储多个数据，且可以为不同的数据类型，&#x3D;&#x3D;支持嵌套&#x3D;&#x3D; 列表下标 正向从0开始，反向从-1开始 嵌套下标 123list1 = [[1,2,3],[4,5,6]]# 输出5的格式为print(list1[1][1]) 方法 将函数定义为clss(类)的成员，那函数会称之为：方法 123# 函数def add(x,y): return x + y 1234# 方法class Sudent: def add(self,x,y): return x + y 方法的使用 12student = student()num = student.add(1,2) &#x3D;&#x3D;列表的常用操作&#x3D;&#x3D; 查找某元素的下标索引（正向） 语法：列表.index(元素) 修改特定位置的元素值 语法：列表[下标]&#x3D;值 插入元素 语法：**列表.insert(下标，元素)**，在指定的下标位置（插入后元素要代替的位置）插入指定元素 追加元素（追加到队尾） 语法1：列表.append(元素) 语法2：列表.extend（其他数据容器），将其他数据容器中的内容追加到列表尾部 删除元素 语法1：del列表[下标] 语法2：列表.pop(下标)，将元素提出来并将其从列表中剔除，并可以将剔除元素接收 语法3：列表.remove(元素)，删除某元素在列表中的第一个匹配项（从前到后寻找第一个符合的元素并删除） 清空元素 语法：列表.clear() 统计某元素在列表中的数量 语法：列表.count(元素) 列表内有多少元素 语法：len.(列表) 列表的遍历 while 12345index = 0while index &lt; len(列表): 元素 = 列表[index] 对元素进行处理 index += 1 for 12for 临时变量 in 数据容器: 对临时变量进行处理 2.元组 定义 变量名称 &#x3D; （元素，元素，······） 空元组 变量名称 &#x3D; （） 变量名称 &#x3D; tuple() 注：定义单个元素必须加一个逗号 嵌套 123t = ((1,2,3),(4,5,6))# 将4取出t4 = t[1][0] 元组操作 查找 元组名.index（） 统计某个数据出现的次数 元组名.count() 统计元素个数 len(元组) 修改元组内容 正常来说不可修改 元组内嵌套list可以被修改 3.字符串同样不可修改 查找 名称.index() (若查找多个，查找到的是起始下标) 替换语法：&#x3D;&#x3D;字符串.replace(字符串1，字符串2)&#x3D;&#x3D;功能：将字符串内的全部：字符串1，替换为字符串2注：是得到了一个新字符串，可以被接收 字符串的分割 语法：&#x3D;&#x3D;字符串.split(分隔符字符串)&#x3D;&#x3D;功能：按照指定的分隔符字符串，将字符串划分为多个字符串，并存入列表对象中注意：字符串本身不变，而是得到了一个列表对象 字符串的规整操作 （1）去首尾空格及换行符 语法：字符串.strip() 12my_str = &quot; itheima &quot;print(my_str.strip(&quot;12&quot;)) # 结果：&quot;itheima&quot; （2）去前后指定字符串 ​ 语法：字符串.strip(字符串) 12my_str = &quot;12itheima21&quot;print(my_str.strip(&quot;12&quot;)) # 结果：&quot;itheima&quot; 统计 名称.count() 长度(包括空格) 名称.len() 4.序列 切片（不会影响原本）语法：序列[起始下标：结束下标：步长]不包含结束下标，步长若为负，则从后往前特殊： 12my_str = &quot;123456&quot;result = my_str[::-1] 等同于将序列反转 123my_str = &quot;万过薪月，员序程马黑来，nohtyp学&quot;# 得到黑马程序员result = my_str.split(&quot;，&quot;)[1].replace(&quot;来&quot;,&quot;&quot;)[::-1] 5.集合(不支持下标索引) 变量名&#x3D;{元素，元素···} 空集合&#x3D;set() 操作： 添加元素：名称.add() 删除元素：名称.remove() 随机取出一个元素（原本元素被删除）：名称.pop() 清空：名称.clear（） 取两个集合的差集：语法：集合1.diffience(集合2) 集合1为基准，取出集合1里有而集合2里没有的元素，集合1，2不发生变化 123set1 = &#123;1,2,3&#125;set2 = &#123;1,5,6&#125;set3 = set1.diffience(set2) 消除两个元素的差集 语法：集合1.diffience_update(集合2) 功能：对比集合1和集合2，在集合1内，删除和集合2相同的元素 结果：集合1被修改，集合2不变 集合合并 语法：集合1.unior（集合2） 功能：将集合1和集合2合成新集合 结果：原集合1，2不变，得到新集合 len（集合），求不重复元素个数 字典(不支持下标索引) 语法 1my_dict = &#123;key:value,key:value······&#125; 空字典： my_dict = &#123;&#125; my_dict = dict() 嵌套 123456789101112my_dict = &#123; &quot;某1&quot;：&#123; &quot;语文&quot;:77, &quot;数学&quot;:88, &quot;英语&quot;:99 &#125;, &quot;某2&quot;:&#123; &quot;语文&quot;:66, &quot;数学&quot;:55, &quot;英语&quot;:33 &#125;&#125; 若要查询某1的语文成绩 1my_dict[&quot;某1&quot;][&quot;语文&quot;] 操作 新增元素 字典[key] &#x3D; value 注：字典key不可重复，对已存在的key操作则会覆盖原有值 删除元素 字典.pop(key),结果：获得指定key的value，同时删除他 清空元素 字典.clear() 获取全部的key 字典.keys() 字典内key的个数 len() 数据容器通用操作 max（容器），统计容器内最大元素 min（容器），统计容器内最小元素 转换功能 list（容器） 转列表 tuple（容器） 转元组 str（容器） 转字符串 set（容器） 转集合 字典转字符串可以保留value 定容器排序功能（结果会转成列表）（a比A大） sorted（容器，[reverse&#x3D;Ture]）默认为false 函数进阶多返回值12345def return2(): return 1,2x,y = return2()print(x)print(y) 传参 位置传参 按顺序传参 关键字传参 “键&#x3D;值”形式传参，可以不按顺序 注：函数调用时，如果有位置参数，位置参数必须在关键字参数之前 缺省参数 在定义函数时直接为参数提供默认值（必须都在最后），调用时若不传参数则使用缺省参数对应的值 1def user_info(mame,age,gender=&#x27;男&#x27;) 不定长传参类型 位置不定长传参 * 号 12def user-info(*args): print(args) 传进去的所有参数都会被args变量收集，他会根据传进参数的位置合并为一个元组，这就是位置传递 关键字不定长传参 以** 标记一个形式参数，以字典的形式接收参数，形式参数一般命名为kwargs 匿名函数 函数作为参数传递 与普通函数不同的是，确定的数据相同而计算这几个数据的逻辑不同，我们要传入的是一个计算逻辑 lambda匿名函数 lambda关键字可以定义匿名的函数（无名称） 只可临时使用一次 语法：lambda 传入参数：函数体（只能一行代码） 文件操作文件的编码将内容翻译为二进制 密码本默认为UTF-8 文件的读取 open函数（打开一个已经存在的文件或者创建一个新文件） 语法：（文件对象名）&#x3D; open(name,mode,encoding) name:是要打开的目标文件名的字符串（可以包含文件所在的具体路径）。 mode：设置打开文件的模式：只读，写入，追加等 模式 描述 r 以只读方式打开文件（默认） w 打开一个文件只用于写入，如果该文件已存在则打开并从头开始编辑，删除原有内容；如果该文件不存在，创建新文件 a 打开一个文件用于追加。如果该文件已存在，新内容将会被写入到已有内容之后；如果该文件不存在，创建新文件进行写入 encoding（用关键字传参）：编码格式（推荐UTF-8） 读相关方法 read()方法 文件对象.read(num) num表示要从文件中读取的数据的长度（单位是字节），如果没有传入num,那么就表示读取文件中所有数据 readlines（）方法 readlines可以按照行的方式把文件的内容进行一次性读取，并且返回的是一个列表，每一行的数据为一个元素 注：如果调用多个read，下一次read会从上一次结尾处开始 readline（）方法 一次读取一行内容 遍历readline 12for i in 文件对象名: 对列表内元素的操作 文件的关闭 文件对象名.close（） with open(name,mode,encoding) as 文件对象名: 对文件的操作 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748 执行完`with open`中的操作后自动关闭文件## 文件的写入* 文件写入 文件对象名.write(内容)* 内容刷新 文件对象名.flush()* 文件的关闭 文件对象名.close() 注：close中包含flush功能* 注意：若文件不存在，则创建新文件；若存在，则删除原内容再进行写入## 文件的追加a模式* 文件写入 文件对象名.write(内容)* 内容刷新 文件对象名.flush()* 文件的关闭 文件对象名.close()# python异常，模块与包## 捕获常规异常语法：```pythontry: 可能发生错误的代码except: 如果出现异常执行的代码 捕获指定异常基本语法： 1234try: print(name)except NameError as e: print(&#x27;name变量名称未定义错误&#x27;) 注： 如果尝试执行的代码异常类型和要捕获的异常类型不一致，则无法捕获异常 一般try下方只放一行尝试执行的代码 捕获多个异常把要捕获的异常类型的名字，放到except后，并使用元组的方式进行书写 1234try: ...except (NameError,ZeroDivisionError) as e: print(&#x27;...&#x27;) 捕获所有异常1234try: ...except Exception as e: print(&#x27;...&#x27;) else123456try: ...except Exception as e: print(&#x27;...&#x27;)else: 没有异常就执行这个 finally12345678try: ...except Exception as e: print(&#x27;...&#x27;)else: 没有异常就执行这个finally: 无论是否异常都执行 python模块 基础语法1： import 模块名 import 模块名1，模块名2 模块名.功能名（） 基础语法2： from 模块名 import 功能名 使用时就可以只写功能名，不用写.了 from 模块名 import * *表示全部的意思 也不用写.了 as改别名 import 模块名 as 别名 from 模块名 import 功能名 as 别名 自定义模块main变量 模块调试的时候会执行，从其他文件调用的时候不执行 all变量 在使用*的时候会受到all变量的限制 python包文件夹 必须有—init—.py这个文件 调用时 import 包名.模块名","categories":[],"tags":[]},{"title":"","slug":"Typora使用笔记","date":"2024-04-07T11:00:20.825Z","updated":"2023-11-13T14:46:14.110Z","comments":true,"path":"2024/04/07/Typora使用笔记/","permalink":"https://yzlsjr.github.io/2024/04/07/Typora%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/","excerpt":"","text":"这是Typora的使用笔记一.标题代码： 12# 一级标题## 二级标题 ctrl+数字1~6 相应级别 ctrl+0 普通文本 ctrl+加号&#x2F;减号 级别加减 二.段落 换行 shift + enter 小换行 enter 大换行 分割线 语法：—或***+回车 三.文字显示 字体 类型 符号 快捷键 粗体 ** ** ctrl + B 删除线 ~~ ~~ shift + Alt + 5 下划线 &lt;u&gt; &lt;u&gt; ctrl + u 斜体 * * ctrl + L 高亮 &#x3D;&#x3D; &#x3D;&#x3D; 无 如果要显示*要输入\\* 上下标 上标 ^ ^ 下标 ~ ~ 四.列表 无序列表 代码： 1*/-/+ +空格 快捷键：ctrl + shift + ] 效果：只有同一级 苹果 香蕉 橘子 子集类： 一级 二级 三级 TAB键向下移动一级，shift + TAB 键向上一级 有序列表 数字 + . + 空格 快捷键 ：ctrl + shift + [ 效果： aaa bbb ccc 按退格键输入正常文本 任务列表 1实心点 加 []+空格 快捷键：ctrl + shift + x 效果 五.区块代码： 12&gt; + 空格两个&gt;为两层嵌套，以此类推 效果: aaa bbb ccc 六.代码1.行内代码 12` `快捷键：ctrl + shift + ` 效果：print() 2.代码块 1快捷键：ctrl + shift + K 效果: 1234 七.链接快捷键：ctrl + k 跳转方法：按ctrl + 点击 [跳转地址名称](链接) 跳转标题的方法： [名称](#标题) 效果： 标题一 八.脚注文字后加[^文本] 效果： 文字^1 九.图片方法：！[]() 左&#x2F;右对齐 align&#x3D;”right&#x2F;left” 十.表格快捷键：ctrl + T 效果： shift + enter 一格内多行","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2024-04-07T10:42:54.363Z","updated":"2024-04-07T10:42:54.363Z","comments":true,"path":"2024/04/07/hello-world/","permalink":"https://yzlsjr.github.io/2024/04/07/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}